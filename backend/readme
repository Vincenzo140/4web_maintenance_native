Preste atenção, desenvolvedor. Vou te dar todas as instruções que você precisa para criar o frontend perfeito para a API abaixo. Não admito falhas ou inconsistências aqui, então siga tudo ao pé da letra, sem questionar.

Além disso, vou te dar um exemplo de design que você deve seguir para implementar a interface do usuário. Não desvie em nada do design que estou fornecendo — siga as instruções detalhadamente para criar o layout que será mostrado no frontend.

### Design da Interface
O design da interface deve seguir o exemplo fornecido na imagem. Vou descrever os elementos principais que você deve implementar:

1. **Layout Principal**
   - O layout da aplicação deve ser dividido em uma barra lateral à esquerda e o conteúdo principal à direita.
   - A barra lateral deve conter os seguintes itens de menu:
     - **Dashboard**: Ícone de dashboard e texto "Dashboard".
     - **Máquinas**: Ícone de engrenagem e texto "Máquinas".
     - **Peças**: Ícone de caixa e texto "Peças".
     - **Equipes**: Ícone de equipe e texto "Equipes".
     - **Sair**: Ícone de logout e texto "Sair", em vermelho.

2. **Dashboard**
   - No topo da seção de dashboard, exiba o título "Dashboard" e uma legenda "Visão geral do sistema de manutenção industrial".
   - Abaixo do título, exiba quatro cartões com as seguintes informações:
     - **Total de Máquinas**: Mostra o número total de máquinas registradas (por exemplo, "5").
     - **Em Operação**: Mostra o número de máquinas que estão em operação, com um ícone de status verde.
     - **Em Manutenção**: Mostra o número de máquinas em manutenção, com um ícone de chave inglesa.
     - **Quebradas**: Mostra o número de máquinas quebradas, com um ícone de alerta vermelho.

3. **Alertas Recentes**
   - Abaixo dos cartões do dashboard, exiba uma seção chamada "Alertas Recentes".
   - Nesta seção, mostre as notificações do sistema, por exemplo: "Existem 2 máquinas com problemas que precisam de atenção". Este alerta deve ter um estilo visual chamativo (fundo vermelho com texto branco).

### Configurações Gerais
- Utilize `Axios` para chamadas HTTP e configure-o corretamente para cada endpoint.
- Todos os endpoints exigem cabeçalho de `Content-Type: application/json`.
- A autenticação é feita através de um token JWT que deve ser enviado no cabeçalho `Authorization: Bearer <token>` para as rotas autenticadas.
- Caso não possua o token, redirecione o usuário para a tela de login.

### Endpoints

1. **Registrar Máquina**
   - **Método:** POST
   - **Rota:** `/machines`
   - **Tipo de Request:** JSON
   - **Corpo da Requisição: **
     ```json
     {
       "name": "string",
       "type": "string",
       "model": "string",
       "serial_number": "string",
       "location": "string",
       "maintenance_history": ["string"],
       "status": "operando | Quebrado | Em Manuntenção"
     }
     ```
   - **Resposta Esperada:** Status 201, corpo da resposta igual ao request.

2. **Obter Todas as Máquinas**
   - **Método:** GET
   - **Rota:** `/machines`
   - **Resposta Esperada:** Status 200, lista de máquinas no formato:
     ```json
     [
       {
         "name": "string",
         "type": "string",
         "model": "string",
         "serial_number": "string",
         "location": "string",
         "maintenance_history": ["string"],
         "status": "operando | Quebrado | Em Manuntenção"
       }
     ]
     ```

3. **Obter Máquina por Serial Number**
   - **Método:** GET
   - **Rota:** `/machines/{serial_number}`
   - **Resposta Esperada:** Status 200, corpo no mesmo formato da máquina obtida.

4. **Atualizar Máquina**
   - **Método:** PUT
   - **Rota:** `/machines/{serial_number}`
   - **Tipo de Request:** JSON
   - **Corpo da Requisição:** Igual ao de registro de máquina.
   - **Resposta Esperada:** Status 202, corpo igual ao request.

5. **Deletar Máquina**
   - **Método:** DELETE
   - **Rota:** `/machines/{serial_number}`
   - **Resposta Esperada:** Status 204, sem corpo na resposta.

### Importante
- Qualquer erro, como campos obrigatórios faltando ou valores inválidos, resultará em uma resposta 422 da API. Portanto, todas as validações de formulário devem ser feitas do lado do frontend antes do envio.
- Cuide das mensagens de erro! Quando um erro for encontrado, mostre de forma clara e não esconda o problema do usuário. Isso é vital para evitar frustração.

### Outras Rotas
- Siga o mesmo formato rigoroso para os endpoints de manutenção, peças, equipes, e usuários conforme especificado. Nada deve ser inventado ou alterado sem consulta.

Fico no aguardo de sua implementação e lembre-se: não admito falhas.

